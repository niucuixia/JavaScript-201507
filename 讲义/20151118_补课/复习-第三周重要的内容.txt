1、盒子模型的常用的13个属性
 //1、client系列://内容是否溢出对其没有任何的影响
    //clientWidth:width+左右padding
    //clientHeight:height+上下padding
    //clientTop:上边框的高度   //其实都是自己的border-width的值
    //clientLeft:左边框的宽度
 //2、offset系列 //内容是否溢出对其没有任何的影响
    //offsetWidth:clientWidth+左右边框的宽度
    //offsetHeight:clientHeight+上下边框的高度
    //offsetTop:上偏移量  盒子的"偏移量" ->"当前元素外边框" 距离 "父级参照物内边框" 的偏移距离
    //offsetLeft:左偏移量
    //offsetParent:当前元素的父级参照物,不设置任何的position: relative; inner.offsetParent ->body
                   如果想修改父级参照物,父级参照物加上position的样式属性即可(absolute relative fixed)
  //3、scroll系列：
     //scrollWidth:clientWidth    //[在没有内容溢出的情况下]
     //scrollHeight:clientHeight  //[在没有内容溢出的情况下]
     //scrollTop:竖向滚动条卷去的高度
     //scrollLeft:横向滚动条卷去的宽度

2、getComputedStyle获取经过浏览器计算的样式->getCss
   function getCss(curEle, attr) {
      var val = null;
      if ("getComputedStyle" in window) {
          val = window.getComputedStyle(curEle, null)[attr];
      } else {
          val = curEle.currentStyle[attr];
      }
      return val;
   }
3、关于盒子偏移量
  1)offsetParent和parentNode的区别
    //parentNode:当前元素的父亲节点
    //offsetParent:当前元素的父级参照物
  2)如何修改offsetParent
    //如果想修改父级参照物,父级参照物加上position的样式属性即可(absolute relative fixed)
  3)offset ->获取任意元素距离body的上/左偏移量
    function offset(curEle) {
        var offsetP = curEle.offsetParent;
        var l = curEle.offsetLeft, t = curEle.offsetTop;
        while (offsetP) {
            if (navigator.userAgent.indexOf("MSIE 8.0") < 0) {
            /*index是MSIE 8.0 在 navigator.userAgent 数组中的索引 如果没有返回的都是-1*/
                l += offsetP.clientLeft;
                t += offsetP.clientTop;
            }
            l += offsetP.offsetLeft;
            t += offsetP.offsetTop;
            offsetP = offsetP.offsetParent;
        }
        return {
            top: t,
            left: l
        };
    }

    var opOffset = offset(op);
    console.log(opOffset);

    //检查浏览器版本
    console.log(navigator.userAgent);

4、scrollTop/scrollLeft的综合实战应用
   ->跑马灯

   ->回到顶部
   //给我们的goTo绑定点击事件,当点击的时候让页面的scrollTop从当前位置变为0
       goTo.onclick = function () {
           var tarT = (document.documentElement.scrollTop || document.body.scrollTop) - 0;
           var step = (tarT / 1000) * 10;
           var timer = window.setInterval(function () {
               document.documentElement.scrollTop -= step;
               document.body.scrollTop -= step;
               if ((document.documentElement.scrollTop || document.body.scrollTop) <= 0) {
                   window.clearInterval(timer);
               }
           }, 10);
       };
5、定时器及异步加载 ->异步编程的总结

6、综合实战之图片延迟加载

7、DOM库的编写 -> utils.js里面的45个方法
//getElementsByClass：We get the elements through the style class, solve the getElementsByClassName not compatible in IE6~8
    _utils.getElementsByClass = function getElementsByClass(strClass, context) {
        //this->_utils
        context = context || document;

        //To determine whether the current browser is compatible with our getElementsByClassName approach, we can use this method directly, in the context of the implementation of context
        if ("getElementsByClassName" in document) {
            return this.listToArray(context.getElementsByClassName(strClass));
        }

        //In case of not compatible with this method we have to write code to handle compatible
        var strAry = strClass.replace(/(^ +)|( +$)/g, "").split(/\s+/), tagList = context.getElementsByTagName("*"), ary = [];
        for (var i = 0; i < tagList.length; i++) {
            var curTag = tagList[i];
            curTag.flag = true;
            for (var k = 0; k < strAry.length; k++) {
                var reg = new RegExp("(^| +)" + strAry[k] + "( +|$)");
                if (!reg.test(curTag.className)) {
                    curTag.flag = false;
                    break;
                }
            }
            curTag.flag ? ary[ary.length] = curTag : null;
        }
        return ary;
    };
8、选项卡插件



